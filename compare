#!/usr/bin/python
'''
Confront the parameters extracted by opm and DuctApe
'''

db = 'ductape.db'
db_vaas  = 'opm.db'

par = ['AV', 'area', 'max', 'lag', 'slope']
dp = {  'lambda' : 'lag',
        'mu' : 'slope',
        'A' : 'max',
        'AUC' : 'area'}
        
colorparam = {
        'AV' : 'orange',
        'lag' : 'blue',
        'slope' : 'red',
        'max' : 'green',
        'area' : 'black'}

dPlates = {'PM01':'PM01', 'PM02':'PM02A',
            'PM03':'PM03B', 'PM04':'PM04A',
            'PM05':'PM05', 'PM06':'PM06',
            'PM07':'PM07', 'PM08':'PM08',
            'PM09':'PM09', 'PM10':'PM10',
            'PM11':'PM11C', 'PM12':'PM12B',
            'PM13':'PM13B', 'PM14':'PM14A',
            'PM15':'PM15B', 'PM16':'PM16A',
            'PM17':'PM17A', 'PM18':'PM18C',
            'PM19':'PM19', 'PM20':'PM20B',
            'PM01-':'PM01', 'PM02-A':'PM02',
            'PM03-B':'PM03B','PM04-A':'PM04A',
            'PM05-':'PM05', 'PM06-':'PM06',
            'PM07-':'PM07','PM08-':'PM08',
            'PM09-':'PM09'}

from ductape.storage.SQLite.database import Biolog
from ductape.phenome.biolog import getPlates, Experiment
from ductape.common.utils import smooth, compress
from ductape.phenome.fitting import logistic, gompertz, richards

biolog = Biolog(db_vaas)

sigs = [s for s in biolog.getAllSignals()]
plates = [p for p in getPlates(sigs, nonmean=True)]

isZero = biolog.atLeastOneZeroSubtracted()
vaas = Experiment(plates=plates, zero=isZero)
# Confront also the AV
# Remove the parameters with value sway out of the norm
from copy import deepcopy
plates2 = deepcopy(plates)
for p in plates2:
    for w in p.getWells():
        if w.lag > 70 or w.lag < 0:
            w.lag = 0
        if w.slope > 30:
            w.slope = 0
vaas2 = Experiment(plates=plates2, zero=isZero)
vaas2.clusterize(n_clusters=5)

biolog = Biolog(db)

sigs = [s for s in biolog.getAllSignals()]
plates = [p for p in getPlates(sigs, nonmean=True)]

isZero = biolog.atLeastOneZeroSubtracted()
exp = Experiment(plates=plates, zero=isZero)

# Compare the AVs
AVdiffs = []
ddiff = {}
pdiff = {}

ddiff['AV'] = []
pdiff['AV'] = {}

for w in vaas2.getWells():
    if w.plate_id not in pdiff['AV']:
        pdiff['AV'][w.plate_id] = []

    av1 = w.activity
    av2 = exp.experiment[w.plate_id][w.well_id][w.strain][w.replica].activity
    diff = float(av1 - av2)/4

    AVdiffs.append(diff)
    ddiff['AV'].append(diff)
    pdiff['AV'][w.plate_id].append(diff)

def getWells():
    wellChars = 'ABCDEFGH'
    for wh in wellChars:
            for wi in range(1,13):
                if wi < 10:
                    wid = '%s0%d'%(wh, wi)
                else:
                    wid = '%s%d'%(wh, wi)
                yield wid

import matplotlib.pyplot as plt
fig = plt.figure()

for param in dp.values():
    ddiff[param] = []
    pdiff[param] = {}
    
    for well in exp.getWells():
        pid = well.plate_id
        wid = well.well_id
        orgid = well.strain
        if pid not in pdiff[param]:
            pdiff[param][pid] = []
        diffs = []
        
        # Discard the low activity wells
        if well.activity <= 2:continue
        # Discard the wells where no fitting was possible
        if exp.experiment[pid][wid][orgid][1].model is None:
            continue
         
        v1 = vaas.normalizeParam(param, getattr(vaas.experiment[pid][wid][orgid][1], param))
        v2 = exp.normalizeParam(param, getattr(exp.experiment[pid][wid][orgid][1], param))

        diff = v1 - v2
            
        diffs.append(diff)
        ddiff[param].append(diff)
        pdiff[param][pid].append(diff)

from ductape.actions import colorBoxPlot

fig = plt.figure(figsize=(30,18))

# Total
ax = plt.subplot2grid((6,4), (0,0), colspan=4)
value = []
color = []
for param in par:
    value.append(ddiff[param])
    color.append(colorparam[param])
    
bplot=ax.boxplot(value,1)
colorBoxPlot(ax, bplot, color)

ax.set_xticklabels(par, size='small')
ax.set_title('Overall')
    
ax.set_ylabel('Normalized difference', size='small')
    
ax.yaxis.grid(color='gray', linestyle='dashed')
ax.set_ylim(-1,1)

# Each plate
rid = 1
cid = 0
for pid in sorted(pdiff['AV'].keys()):
    ax = plt.subplot2grid((6,4), (rid,cid))
    
    value = []
    color = []
    for param in par:
        value.append(pdiff[param][pid])
        color.append(colorparam[param])
    
    bplot=ax.boxplot(value,1)
    colorBoxPlot(ax, bplot, color)
    ax.set_xticklabels(par, size='x-small')
    ax.set_title(pid)
    
    ax.set_ylabel('Normalized difference', size='x-small')
    
    ax.yaxis.grid(color='gray', linestyle='dashed')
    ax.set_ylim(-1,1)
    
    cid += 1
    if cid == 4:
        cid = 0
        rid += 1

plt.savefig('differences.pdf')
